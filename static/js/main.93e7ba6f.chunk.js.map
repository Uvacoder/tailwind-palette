{
    "version": 3,
    "sources": [
        "assets/settings.svg",
        "components/settings.tsx",
        "components/input.tsx",
        "assets/copy.svg",
        "components/renderPalete.tsx",
        "utils/coreUtils.ts",
        "components/displayOutputColor.tsx",
        "assets/spam.svg",
        "App.tsx",
        "reportWebVitals.ts",
        "index.tsx"
    ],
    "names": [
        "Settings",
        "show",
        "toggle",
        "React",
        "showHelpTooltip",
        "toggleHelpTooltip",
        "refNode",
        "document",
        "createElement",
        "addEventListener",
        "handleClick",
        "removeEventListener",
        "e",
        "console",
        "log",
        "target",
        "current",
        "contains",
        "closeHelpTooltip",
        "className",
        "ref",
        "href",
        "onClick",
        "preventDefault",
        "width",
        "height",
        "src",
        "SettingsIcon",
        "style",
        "transform",
        "alt",
        "id",
        "tabIndex",
        "opacity",
        "visibility",
        "onBlur",
        "defaultChecked",
        "hex",
        "icons",
        "checked",
        "name",
        "onChange",
        "text",
        "lightDarkTint",
        "InputSection",
        "setShowOutput",
        "inputValue",
        "setInput",
        "color",
        "onChangeComplete",
        "newInput",
        "replace",
        "role",
        "action",
        "htmlFor",
        "type",
        "value",
        "includes",
        "index",
        "indexOf",
        "slice",
        "length",
        "placeholder",
        "background",
        "marginLeft",
        "RenderPalette",
        "item",
        "addToast",
        "useToasts",
        "settingsContextValue",
        "useContext",
        "SettingsContext",
        "stopPropagation",
        "navigator",
        "clipboard",
        "writeText",
        "toUpperCase",
        "appearance",
        "intToHex",
        "rgbint",
        "number",
        "str",
        "pad",
        "Math",
        "min",
        "max",
        "round",
        "toString",
        "rgbToHex",
        "rgb",
        "red",
        "green",
        "blue",
        "calculate",
        "colorValue",
        "shadeOrTint",
        "parseInt",
        "substr",
        "hexToRGB",
        "shadeValues",
        "i",
        "rgbShade",
        "rgbTint",
        "DisplayOutput",
        "hexcode",
        "showOutput",
        "onHideOutput",
        "lightPalette",
        "concat",
        "darkPalette",
        "calculateShades",
        "generalPalette",
        "themeJSON",
        "light",
        "dark",
        "mix",
        "reverse",
        "forEach",
        "push",
        "jsonToString",
        "JSON",
        "stringify",
        "map",
        "j",
        "join",
        "substring",
        "CopySVGIcon",
        "createContext",
        "App",
        "useState",
        "hexCode",
        "setHexCodeStr",
        "showHex",
        "toggleHex",
        "showText",
        "toggleText",
        "showLightDarkTint",
        "toggleLightDarkTint",
        "showSettingsObject",
        "Provider",
        "SpamSVG",
        "reportWebVitals",
        "onPerfEntry",
        "Function",
        "then",
        "getCLS",
        "getFID",
        "getFCP",
        "getLCP",
        "getTTFB",
        "ReactDOM",
        "render",
        "StrictMode",
        "autoDismiss",
        "autoDismissTimeout",
        "getElementById"
    ],
    "mappings": "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",
    "file": "static/js/main.93e7ba6f.chunk.js",
    "sourcesContent": [
        "export default __webpack_public_path__ + \"/static/media/settings.5bae0488.svg\";",
        "import * as React from 'react'\nimport Toggle from 'react-toggle'\nimport SettingsIcon from 'assets/settings.svg'\n\n// css imports\nimport 'react-toggle/style.css'\n\ninterface ShowSettingStateProps {\n    hex: boolean\n    text: boolean\n    lightDarkTint: boolean\n}\n\ntype ToggleSettingStateProps = {\n    hex: React.Dispatch<React.SetStateAction<boolean>>\n    text: React.Dispatch<React.SetStateAction<boolean>>\n    lightDarkTint: React.Dispatch<React.SetStateAction<boolean>>\n}\n\ninterface SettingsProps {\n    show: ShowSettingStateProps\n    toggle: ToggleSettingStateProps\n}\n\nconst Settings: React.FC<SettingsProps> = ({ show, toggle }) => {\n    const [showHelpTooltip, toggleHelpTooltip] = React.useState(false)\n\n    const refNode = React.useRef<HTMLDivElement>(document.createElement('div'))\n\n    React.useEffect(() => {\n        document.addEventListener('mousedown', handleClick, false)\n\n        // when component will unmount\n        return () => {\n            document.removeEventListener('mousedown', handleClick, false)\n        }\n    }, [])\n\n    const handleClick = (e: any) => {\n        console.log(\n            'handle click target',\n            e.target,\n            refNode.current.contains(e.target)\n        )\n        if (refNode && refNode.current.contains(e.target)) {\n            return\n        }\n\n        toggleHelpTooltip(false)\n    }\n\n    const closeHelpTooltip = () => {\n        console.log('on close help tooltip')\n        toggleHelpTooltip(showHelpTooltip ? false : true)\n    }\n\n    return (\n        <>\n            <div className=\"fixed right-0 mr-4 mt-4  w-12 \" ref={refNode}>\n                <a\n                    className=\"p-2 w-12 bg-gray-600 rounded-md flex items-center\"\n                    href=\"\"\n                    onClick={(e) => {\n                        e.preventDefault()\n                        closeHelpTooltip()\n                    }}\n                >\n                    <img\n                        width={30}\n                        height={30}\n                        className=\"transition-transform ease-in-out duration-300\"\n                        src={SettingsIcon}\n                        style={{\n                            transform: showHelpTooltip\n                                ? 'rotate(90deg)'\n                                : 'rotate(0deg)',\n                        }}\n                        alt=\"settings\"\n                    />\n                </a>\n\n                <div className=\"relative\">\n                    <div\n                        id=\"help-tooltip-box\"\n                        tabIndex={0}\n                        style={{\n                            opacity: showHelpTooltip ? 1 : 0,\n                            visibility: showHelpTooltip ? 'visible' : 'hidden',\n                        }}\n                        className=\" mt-1 px-2 py-2  w-72  \n                            shadow-md absolute outline-none right-0 border border-gray-200 \n                             transition-all ease-in-out duration-300\n                            \"\n                        onBlur={(e) => {\n                            if (!refNode.current.contains(e.target)) {\n                                closeHelpTooltip()\n                            }\n                        }}\n                    >\n                        <div className=\"flex items-center  py-2 \">\n                            <div className=\"w-2/3 text-md\">Show Hex Code</div>\n                            <div className=\"w-1/3 text-right pr-2\">\n                                <Toggle\n                                    defaultChecked={show.hex}\n                                    icons={false}\n                                    checked={show.hex}\n                                    tabIndex={0}\n                                    name=\"showHexToggle\"\n                                    onChange={() => toggle.hex(!show.hex)}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"flex items-center border-t border-gray-200 py-2\">\n                            <div className=\"w-2/3 text-md\">Show Text</div>\n                            <div className=\"w-1/3 text-right pr-2\">\n                                <Toggle\n                                    defaultChecked={show.text}\n                                    icons={false}\n                                    checked={show.text}\n                                    tabIndex={0}\n                                    name=\"showText\"\n                                    onChange={() => toggle.text(!show.text)}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"flex items-center border-t border-gray-200 py-2\">\n                            <div className=\"w-2/3 text-md\">\n                                Show Tints and Shades\n                            </div>\n                            <div className=\"w-1/3 text-right pr-2\">\n                                <Toggle\n                                    defaultChecked={show.lightDarkTint}\n                                    icons={false}\n                                    checked={show.lightDarkTint}\n                                    tabIndex={0}\n                                    name=\"showLightDarkTints\"\n                                    onChange={() =>\n                                        toggle.lightDarkTint(\n                                            !show.lightDarkTint\n                                        )\n                                    }\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Settings\n",
        "import * as React from 'react'\n\nimport { ChromePicker } from 'react-color'\n\nexport interface InputSectionProps {\n    setShowOutput(hexcode: string): any\n}\n\nconst InputSection: React.FC<InputSectionProps> = ({ setShowOutput }) => {\n    const [inputValue, setInput] = React.useState('ff0059')\n\n    const onChangeInput = (e: any) => {\n        let value: string = e.target.value\n\n        if (value.includes('#')) {\n            let index = value.indexOf('#')\n            value = value.slice(index + 1, value.length)\n        }\n        console.log('on change input', value)\n        setInput(value)\n    }\n\n    const onSubmit = () => {\n        setShowOutput(inputValue)\n    }\n\n    const handleChangeComplete = (color: any) => {\n        let newInput = color.hex.replace('#', '')\n        // color.hex.splice(1, color.hex.length)\n        setInput(newInput)\n    }\n\n    return (\n        <div className=\"w-full sm:w-6/12 flex items-center  \">\n            <div\n                className=\"flex flex-wrap px-4 py-6 \n            \"\n            >\n                <div className=\"w-full lg:w-1/2\">\n                    <ChromePicker\n                        className=\"cursor-pointer\"\n                        color={`#${inputValue}`}\n                        onChangeComplete={handleChangeComplete}\n                    />\n                </div>\n                <div className=\"w-full lg:px-4 lg:w-1/2\">\n                    <div\n                        className=\"h-full flex flex-col flex-shrink-0 items-end justify-between  \"\n                        style={{ width: '245px' }}\n                    >\n                        <div className=\" py-2 text-lg font-semibold text-gray-700\">\n                            <span role=\"img\" aria-label=\"backhand-left\">\n                                👈\n                            </span>{' '}\n                            Pick a color or type your color hexcode directly\n                            {/* <span role=\"img\" aria-label=\"backhand-down\">\n                        👇\n                    </span>{' '} */}\n                        </div>\n                        <form action=\"\" className=\"w-full \">\n                            <div className=\"pb-4\">\n                                <label\n                                    htmlFor=\"email\"\n                                    className=\"text-sm block font-bold pb-2\"\n                                >\n                                    Color\n                                </label>\n                                <div className=\"flex relative\">\n                                    <div className=\"absolute top-2 left-2 text-lg\">\n                                        #\n                                    </div>\n                                    <input\n                                        type=\"hexcode\"\n                                        name=\"hexcode\"\n                                        id=\"\"\n                                        value={inputValue}\n                                        onChange={onChangeInput}\n                                        className=\"pl-6 pr-16 py-2 w-full\n                        text-lg rounded-md border border-gray-300 \n                        focus:outline-none focus:shadow-outline \"\n                                        placeholder=\"4ef455\"\n                                    />\n\n                                    <span\n                                        className=\"mt-2 rounded-md w-7 h-7 \"\n                                        style={{\n                                            background: `#${inputValue}`,\n                                            marginLeft: '-35px',\n                                        }}\n                                    ></span>\n                                </div>\n                            </div>\n                            <div className=\"w-full\">\n                                <button\n                                    className=\"w-full \n                                    bg-gray-700 hover:bg-gray-500 \n                            text-white font-bold px-4 py-2 rounded \n                            focus:outline-none focus:shadow-outline\"\n                                    type=\"button\"\n                                    onClick={onSubmit}\n                                >\n                                    Generate\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default InputSection\n",
        "export default __webpack_public_path__ + \"../media/copy.b139afe4.svg\";",
        "import * as React from 'react'\nimport { useContext } from 'react'\nimport { ToastProvider, useToasts } from 'react-toast-notifications'\n\n// local file imports\nimport { SettingsContext } from '../App'\n\nexport interface RenderPaletteProps {\n    item: String\n    index: number\n}\n\nconst RenderPalette: React.FC<RenderPaletteProps> = ({ item, index }) => {\n    const { addToast } = useToasts()\n    const settingsContextValue: any = useContext(SettingsContext)\n    console.log('settingsContextValue', settingsContextValue)\n\n    return (\n        <React.Fragment>\n            <div\n                className=\"rounded-lg w-full sm:w-9/12 lg:w-5/12 xl:w-3/12 \n            mr-3 mb-3 \n            overflow-hidden\"\n            >\n                <div className=\"\">\n                    <div\n                        className=\"h-20 relative\"\n                        style={{ background: `#${item}` }}\n                    >\n                        {settingsContextValue.text ? (\n                            <div className=\"pb-2 absolute bottom-1 w-full text-center\">\n                                <span className=\"text-black text-sm mx-2\">\n                                    A\n                                </span>\n                                <span className=\"text-black text-lg mx-2\">\n                                    A\n                                </span>\n                                <span className=\"text-white text-sm mx-2\">\n                                    A\n                                </span>\n                                <span className=\"text-white text-lg mx-2\">\n                                    A\n                                </span>\n                            </div>\n                        ) : null}\n                    </div>\n                    <div className=\"py-4 px-2 flex items-center justify-between bg-gray-100\">\n                        <div className=\"text-gray-600\">{100 * index}</div>\n                        <div\n                            className=\"color-box cursor-pointer hover:underline relative text-gray-600\"\n                            onClick={(e) => {\n                                e.stopPropagation()\n                                navigator.clipboard.writeText(\n                                    `#${item.toUpperCase()}`\n                                )\n                                console.log('on click copy hexcode')\n                                addToast('Hexcode copied', {\n                                    appearance: 'success',\n                                })\n                            }}\n                        >\n                            {settingsContextValue.hex\n                                ? `#${item.toUpperCase()}`\n                                : ''}\n                            <span\n                                className=\" w-20  text-xs absolute -top-7 right-0 \n                                        color-box-tooltip bg-gray-600 text-white px-1 py-1 cursor-pointer\"\n                            >\n                                click to copy\n                            </span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default RenderPalette\n",
        "export function pad(number: string, length: any) {\n    let str = '' + number\n    while (str.length < length) {\n        str = '0' + str\n    }\n    return str\n}\n\nexport function intToHex(rgbint: number) {\n    return pad(Math.min(Math.max(Math.round(rgbint), 0), 255).toString(16), 2)\n}\n\nexport function rgbToHex(rgb: any) {\n    return intToHex(rgb.red) + intToHex(rgb.green) + intToHex(rgb.blue)\n}\n\nexport function hexToRGB(colorValue: string) {\n    return {\n        red: parseInt(colorValue.substr(0, 2), 16),\n        green: parseInt(colorValue.substr(2, 2), 16),\n        blue: parseInt(colorValue.substr(4, 2), 16),\n    }\n}\n\nexport function calculate(colorValue: string, shadeOrTint: any) {\n    let color = hexToRGB(colorValue)\n    let shadeValues = []\n\n    for (let i = 0; i < 10; i++) {\n        shadeValues[i] = rgbToHex(shadeOrTint(color, i))\n        console.log('colorValue calc tints', rgbToHex(shadeOrTint(color, i)))\n    }\n    console.log('colorValue calc tints', shadeValues)\n    return shadeValues\n}\n\nexport function rgbShade(rgb: any, i: any) {\n    return {\n        red: rgb.red * (1 - 0.1 * i),\n        green: rgb.green * (1 - 0.1 * i),\n        blue: rgb.blue * (1 - 0.1 * i),\n    }\n}\n\nexport function rgbTint(rgb: any, i: any) {\n    return {\n        red: rgb.red + (255 - rgb.red) * i * 0.1,\n        green: rgb.green + (255 - rgb.green) * i * 0.1,\n        blue: rgb.blue + (255 - rgb.blue) * i * 0.1,\n    }\n}\n\nexport function calculateShades(colorValue: string) {\n    return calculate(colorValue, rgbShade).concat('000000')\n}\n\nexport function calculateTints(colorValue: string) {\n    return calculate(colorValue, rgbTint).concat('ffffff')\n}\n",
        "import * as React from 'react'\nimport { useContext } from 'react'\nimport ReactJson from 'react-json-view'\n\nimport CopySVGIcon from '../assets/copy.svg'\nimport RenderPalette from './renderPalete'\nimport { calculateShades, calculateTints } from 'utils/coreUtils'\nimport { SettingsContext } from '../App'\n\nexport interface DisplayOutputProps {\n    hexcode: string\n    showOutput: Boolean\n    onHideOutput(event: any): any\n}\n\nconst DisplayOutput: React.FC<DisplayOutputProps> = ({\n    hexcode,\n    showOutput,\n    onHideOutput,\n}) => {\n    const settingsContextValue: any = useContext(SettingsContext)\n    const lightPalette: Array<String> = calculateTints(hexcode)\n    const darkPalette: Array<String> = calculateShades(hexcode)\n    const generalPalette: Array<String> = []\n\n    const themeJSON: any = { light: {}, dark: {}, mix: {} }\n    lightPalette.reverse().forEach((item, index) => {\n        if (index > 0 && index % 2 === 0) {\n            generalPalette.push(item)\n        }\n        themeJSON.light[index * 100] = `#${item.toUpperCase()}`\n    })\n\n    // generate dark color palette for config\n    darkPalette.forEach((item, index) => {\n        if (index > 0 && index % 2 === 0 && item !== '000000') {\n            generalPalette.push(item)\n        }\n        themeJSON.dark[index * 100] = `#${item.toUpperCase()}`\n    })\n    // generate mix palette for config\n    generalPalette.forEach((item, index) => {\n        themeJSON.mix[index * 100] = `#${item.toUpperCase()}`\n    })\n\n    if (settingsContextValue.lightDarkTint === false) {\n        // generate light color palette for config\n        delete themeJSON.light\n        delete themeJSON.dark\n    }\n\n    console.log(\n        'lightPalette ',\n        lightPalette,\n        settingsContextValue.lightDarkTint\n    )\n\n    let jsonToString = JSON.stringify(themeJSON)\n    return (\n        <div className=\"my-4\">\n            <div\n                className={` transition-all duration-200 ease-in-out bg-white py-8 ${\n                    showOutput ? `opacity-100 ` : `opacity-0  `\n                }`}\n            >\n                <div className=\"w-full flex flex-wrap \">\n                    <div className=\"w-full sm:w-6/12 xl:w-8/12  px-4\">\n                        <div className=\"w-full mt-6\">\n                            <div className=\"text-xl  font-semibold text-gray-700\">\n                                Mix{' '}\n                                <span className=\"text-sm text-gray-500\">\n                                    (general theme)\n                                </span>\n                            </div>\n                            <div className=\"w-full mt-4 flex flex-wrap items-center\">\n                                {generalPalette.map((item, index) => (\n                                    <React.Fragment key={index}>\n                                        <RenderPalette\n                                            item={item}\n                                            index={index}\n                                        />\n                                    </React.Fragment>\n                                ))}\n                            </div>\n                        </div>\n\n                        {settingsContextValue.lightDarkTint ? (\n                            <>\n                                <div className=\"w-full mt-6\">\n                                    <div className=\"text-xl  font-semibold text-gray-700\">\n                                        Tints{' '}\n                                        <span className=\"text-sm text-gray-500\">\n                                            (light theme)\n                                        </span>\n                                    </div>\n                                    <div className=\"w-full mt-4 flex flex-wrap items-center\">\n                                        {lightPalette.map((item, index) =>\n                                            item !== 'ffffff' ? (\n                                                <React.Fragment key={index}>\n                                                    <RenderPalette\n                                                        item={item}\n                                                        index={index}\n                                                    />\n                                                </React.Fragment>\n                                            ) : null\n                                        )}\n                                    </div>\n                                </div>\n\n                                <div className=\"w-full mt-10 pb-8 \">\n                                    <div className=\" text-xl font-semibold text-gray-700\">\n                                        Shades{' '}\n                                        <span className=\"text-sm text-gray-500\">\n                                            (dark theme)\n                                        </span>\n                                    </div>\n                                    <div className=\"w-full mt-4 flex flex-wrap items-center\">\n                                        {darkPalette.map((item, index) =>\n                                            item !== '000000' ? (\n                                                <React.Fragment key={index}>\n                                                    <RenderPalette\n                                                        item={item}\n                                                        index={index}\n                                                    />\n                                                </React.Fragment>\n                                            ) : null\n                                        )}\n                                    </div>\n                                </div>\n                            </>\n                        ) : null}\n                    </div>\n                    <div className=\"w-full sm:w-6/12 xl:w-4/12 px-4 my-6\">\n                        <div className=\"text-xl font-bold\">\n                            Generated Tailwind config{' '}\n                        </div>\n                        {/* <div>\n                            <ReactJson\n                                style={{\n                                    maxWidth: '80%',\n                                    fontSize: '1rem',\n                                    padding: '1rem',\n                                }}\n                                displayObjectSize={false}\n                                displayDataTypes={false}\n                                name=\"theme\"\n                                // theme=\"monokai\"\n                                src={themeJSON}\n                            />\n                        </div> */}\n                        <div className=\"mt-2 relative code-parent-root\">\n                            {/* prettier-ignore */}\n                            <pre className=\" text-md bg-gray-900 rounded-lg p-4 text-gray-300 \">\n                                {`mix: {\n  ${generalPalette.map( (i,j) => `   ${j * 100}: '#${i.toUpperCase()}'`).join(', \\n')}\n},`}\n\n{settingsContextValue.lightDarkTint ? (\n<>\n{`\n\nlight: {\n  ${lightPalette.map( (i,j) => `   ${j * 100}: '#${i.toUpperCase()}'`).join(', \\n')}\n},`}\n\n{`\n\ndark: {\n  ${darkPalette.map( (i,j) => `   ${j * 100}: '#${i.toUpperCase()}'`).join(', \\n')}\n}`}\n</>\n) : (null)}\n\n                            </pre>\n                            <a\n                                href=\"\"\n                                className=\" code-copy-section transition-opacity ease-in-out duration-300 bg-gray-200 rounded-sm px-2 py-2 absolute right-4 top-4\"\n                                onClick={(e) => {\n                                    e.preventDefault()\n                                    navigator.clipboard.writeText(\n                                        jsonToString.substring(\n                                            1,\n                                            jsonToString.length - 1\n                                        )\n                                    )\n                                }}\n                            >\n                                <img\n                                    width=\"30\"\n                                    height=\"30\"\n                                    src={CopySVGIcon}\n                                    alt=\"clipboard\"\n                                />\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DisplayOutput\n",
        "export default __webpack_public_path__ + \"../media/spam.4f5bc168.svg\";",
        "import React, { FC, HTMLAttributes, ReactChild } from 'react'\n\nimport logo from './logo.svg'\n\n// component imports\nimport Setttings from 'components/settings'\nimport InputSection from 'components/input'\nimport DisplayOutput from 'components/displayOutputColor'\n\n// assets imports\nimport SpamSVG from 'assets/spam.svg'\n\nimport './App.css'\n\nexport const SettingsContext = React.createContext({})\n\nexport const App: FC = () => {\n    const [showOutput, setShowOutput] = React.useState(false)\n    const [hexCode, setHexCodeStr] = React.useState('')\n\n    // part of settings\n    const [showHex, toggleHex] = React.useState(true)\n    const [showText, toggleText] = React.useState(true)\n    const [showLightDarkTint, toggleLightDarkTint] = React.useState(true)\n\n    const showSettingsObject = {\n        hex: showHex,\n        text: showText,\n        lightDarkTint: showLightDarkTint,\n    }\n    return (\n        <section\n            className=\"\n         w-full px-8\"\n        >\n            <div className=\"w-full relative \">\n                <SettingsContext.Provider value={showSettingsObject}>\n                    <Setttings\n                        show={{\n                            hex: showHex,\n                            text: showText,\n                            lightDarkTint: showLightDarkTint,\n                        }}\n                        toggle={{\n                            hex: toggleHex,\n                            text: toggleText,\n                            lightDarkTint: toggleLightDarkTint,\n                        }}\n                    />\n                    <InputSection\n                        setShowOutput={(str) => {\n                            setHexCodeStr(str)\n                            setShowOutput(true)\n                        }}\n                    />\n\n                    {showOutput ? (\n                        <div className=\"transition-all duration-500 ease-in-out\">\n                            <DisplayOutput\n                                hexcode={hexCode}\n                                showOutput={showOutput}\n                                onHideOutput={() => setShowOutput(false)}\n                            />\n                        </div>\n                    ) : (\n                        <div className=\"mt-16\">\n                            <div className=\"flex items-center justify-center p-10\">\n                                <img\n                                    width=\"150\"\n                                    height=\"150\"\n                                    src={SpamSVG}\n                                    alt=\"color-palette\"\n                                />\n                            </div>\n                            <div className=\"text-xl font-bold text-center\">\n                                No color palette to show. Please select or type\n                                color palette from above input{' '}\n                            </div>\n                        </div>\n                    )}\n                </SettingsContext.Provider>\n            </div>\n        </section>\n    )\n}\n\nexport default App\n",
        "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
        "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ToastProvider } from 'react-toast-notifications'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n        <ToastProvider autoDismiss autoDismissTimeout={1500}>\n            <App />\n        </ToastProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"
    ],
    "sourceRoot": ""
}
